- name: Install docker
  hosts: dockerhosts
  become: true
  tasks:
    - name: Install packages
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: true
        cache_valid_time: 3600
      with_items:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - python3-pip
        - virtualenv
        - python3-setuptools
    - name: Add signing key
      ansible.builtin.apt_key:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        state: present
    - name: Add repository into sources list
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
    - name: Install Docker
      ansible.builtin.apt:
        name:
          - docker
          - docker.io
          - docker-compose
          - docker-registry
        state: latest
        update_cache: true
        cache_valid_time: 3600
    - name: Install docker-py
      ansible.builtin.pip:
        name: docker-py


- name: Deploy postgres
  hosts: postgres
  become: true
  gather_facts: false
  vars:
    data_dir: /data/pgdata
  tasks:
    - name: Create data dir with correct ownership
      ansible.builtin.file:
        path: "{{ data_dir }}"
        state: directory
        mode: "0644"
    - name: Start postgres container
      community.docker.docker_container:
        name: postgres_ghost
        image: postgres:9.6
        ports:
          - "0.0.0.0:5432:5432"
        volumes:
          - "{{ data_dir }}:/var/lib/postgresql/data"
        env:
          POSTGRES_USER: "{{ database_user }}"
          POSTGRES_PASSWORD: "{{ database_password }}"
          POSTGRES_DB: "{{ database_name }}"


- name: Deploy ghost
  hosts: ghost
  become: true
  gather_facts: false
  vars:
    url: "https://{{ ansible_host }}"
    database_host: "{{ groups['postgres'][0] }}"
    data_dir: /data/ghostdata
    certs_dir: /data/certs
    net_name: ghostnet
  tasks:
    - name: Create network
      community.docker.docker_network:
        name: "{{ net_name }}"
    - name: Create ghostdata directory
      ansible.builtin.file:
        path: "{{ data_dir }}"
        state: directory
        mode: "0644"
    - name: Generate the config file
      ansible.builtin.template:
        src: templates/config.js.j2
        dest: "{{ data_dir }}/config.js"
        mode: "0644"
    - name: Start ghost container
      community.docker.docker_container:
        name: ghost
        image: ghost
        command: npm start --production
        volumes:
          - "{{ data_dir }}:/var/lib/ghost"
        networks:
          - name: "{{ net_name }}"
    - name: Create certs directory
      ansible.builtin.file:
        path: "{{ certs_dir }}"
        state: directory
        mode: "0644"
    - name: Generate tls certs
      ansible.builtin.command: >
        openssl req -new -x509 -nodes
        -out "{{ certs_dir }}/nginx.crt" -keyout "{{ certs_dir }}/nginx.key"
        -subj "/CN={{ ansible_host }}" -days 3650
        creates=certs/nginx.crt
    - name: Start nginx container
      community.docker.docker_container:
        name: nginx_ghost
        image: ansiblebook/nginx-ghost
        pull: true
        networks:
          - name: "{{ net_name }}"
        ports:
          - "0.0.0.0:80:80"
          - "0.0.0.0:443:443"
        volumes:
          - "{{ certs_dir }}:/certs"
